# apiVersion은 pod가 속해 있는 버젼정보이다. 
# 999.ref_apiversion.md 파일 참조하기 
apiVersion: v1
# Pod는 쿠버네티스의 배포 최소 단위이다. 
kind: Pod
metadata:
  name: "TestPod"
  # 배포될 대상 namespace이다. namespace는 논리적으로 구분된 작업 영역이다. 
  namespace: default
  # 레이블을 나타낸다. 
  labels:
    app: "TestPod"
# Pod의 규격정보를 지정한다.     
spec:
  # 배포되는 컨테이너들을 나열한다. 배열 '-' 을 이용하여 컨테이너를 나열된다.  
  # 하나의 Pod에 여러 container를 정의할 수 있으며, 메인 container 이외의 컨테이너를 배치하는 것을 SideCar라고 한다. 
  containers:
  # 컨테이너 이름 
  - name: TestPod
    # 컨테이너 이미지 이름과 태그를 지정한다. 
    image: "debian-slim:latest"
    # Pod에 할당시 필요한 리소스를 지정한다. (limt는 최대 리소스양, request는 최소 요구사항이다.)
    resources:
      # 최대 리소스 용량 
      limits:
        # cpu는 1000m이 1CPU이다. 특정 시간동안 사용할 CPU 파워를 나타낸다. 
        cpu: 200m 
        # MibiByte로 사용자가 이해하기 쉽게 하기 위해서 1000 기준이다. 즉, 1Mb는 1000Mib이다. 
        memory: 500Mi
      # 최소 리소스 용량 
      requests:
        cpu: 100m
        memory: 200Mi
    # POD를 위한 환경 변수값이다. 
    env:
    # 환경변수 이름
    - name: DB_HOST
      # 환경 변수 값을 어디서 가져와서 설정할지 여부
      valueFrom:
        # configMapKeyRef는 k8s의 configmap에서 조회해 온다. 
        configMapKeyRef:
          # configMap의 이름 
          name: MYAPP
          # configMap 이름내 가져올 값의 key이다. 
          key: DB_HOST
    # ports 는 컨테이너에 연결될 port이다. 
    ports:
    # containerPort는 컨테이너가 뜰때 내부 포트를 의미한다. 
    - containerPort:  80
      name:  http
    # 마운트될 볼룸정보 지정 
    volumeMounts:
    # 볼륨의 이름 
    - name: localtime
      # 컨테이너 내부와 마운트될 내용 
      mountPath: /etc/localtime
  # 볼룸 정보를 지정한다. 
  volumes:
    # 볼륨 이름 volumeMounts에서 이 이름으로 볼륨을 찾는다. 
    - name: localtime
      # 호스트의 경로 (호스트는 kubernetes가 설치된 노드가 된다.)
      hostPath:
        path: /usr/share/zoneinfo/Asia/Shanghai
  # 재시작 정책 (Always: 항상 재시작한다., Never: 1번만 수행하고 다시 재시작 하지 않는다.)
  restartPolicy: Always